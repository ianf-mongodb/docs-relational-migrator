.. _rm-convert-views:

=============
Convert Views
=============

.. contents:: On this page
  :local:
  :backlinks: none
  :depth: 1
  :class: singlecol

You can convert SQL views to MongoDB code with query
converter. Query converter considers the mapping rules and schema
transformations defined in your project when converting your SQL code.

About this Task
---------------

.. include:: /includes/fact-query-converter-generic.rst

Before you Begin
----------------

.. include:: /includes/fact-query-converter-disclaimer.rst

Steps
-----
.. procedure::
  :style: normal

  .. step:: Navigate to the query converter pane

     From the :guilabel:`Code Generation` tab, click the
     :guilabel:`Query Converter` pane.

  .. step:: Open the query converter view

     - If it is your first time using the query converter in your
       project, click :guilabel:`Import From Database`.

     - If your project already has converted SQL code, click the
       :guilabel:`Manage Database Objects` button on the left-hand
       pane.

  .. step:: Connect to your relational database

     a. Specify the connection details to your source database. 

        For details, see :ref:`rm-relational-database-connection-strings`.

     #. Click :guilabel:`Connect`.
 
  .. step:: Select stored views

     a. On the :guilabel:`Import Database Objects` modal, click
        :guilabel:`Database`.
     #. Click the :icon-fa5:`chevron-right` icon next to your schema.
     #. Click the :icon-fa5:`chevron-right` icon next to
        :guilabel:`Views`.
     #. You can toggle views for conversion by clicking
        the :icon-fa5:`check-square` icon next to a view's
        name. All views are selected for conversion by default.
     #. Click :guilabel:`Save`.

  .. step:: Convert and test code

     a. Click a view's name from the left-hand pane under
        :guilabel:`Views`.
        The SQL code is loaded into the :guilabel:`Imported View`
        text field.
     #. Click the :guilabel:`Convert` button. Wait for the query 
        converter to convert your code. The converted MongoDB code 
        displays in the :guilabel:`Converted MongoDB Query` text field.
     #. Click the :icon-fa5:`copy` icon to copy the MongoDB code
        to your clipboard.
     #. Test and validate the generated MongoDB code.

     .. tip::

        .. include:: /includes/fact-query-converter-filter.rst

Examples
--------

The following example shows a PostGreSQL view from the 
:ref:`Northwind <create-project-sample-schema>` database converted to 
MongoDB code.

.. tabs::

  .. tab:: Relational Input
     :tabid: sql-input-1

     .. code-block:: sql
        :copyable: false


        SELECT 
        O.ORDER_ID,
        O.CUSTOMER_ID,
        O.ORDER_DATE,
        OD.UNIT_PRICE,
        OD.DISCOUNT

         FROM ORDERS AS O
            JOIN ORDER_DETAILS AS OD 
               ON O.ORDER_ID = OD.ORDER_ID;

  .. tab:: MongoDB Output
     :tabid: mongodb-output-1

     .. code-block:: javascript
        :copyable: false

        async function query(db) {
         return await db.collection('orders').aggregate([
            {
               $lookup: {
               from: 'orderDetails',
               localField: 'orderId',
               foreignField: 'orderId',
               as: 'orderDetails'
               }
            },
            {
               $unwind: '$orderDetails'
            },
            {
               $project: {
               orderId: 1,
               customerId: 1,
               orderDate: 1,
               unitPrice: '$orderDetails.unitPrice',
               discount: '$orderDetails.discount'
               }
            }
         ]).toArray();
         }

  .. tab:: Relational Input
     :tabid: sql-input-2

     .. code-block:: sql
        :copyable: false

         SELECT 
            POSTAL_CODE, 
            COUNT(*) AS CUSTOMERCOUNT
         FROM CUSTOMERS
         GROUP BY POSTAL_CODE
         ORDER BY CUSTOMERCOUNT DESC;

  .. tab:: MongoDB Output
     :tabid: mongodb-output-2

     .. code-block:: javascript
        :copyable: false

         sync function query(db) {
            return db.collection('customers').aggregate([
               {
                  $group: {
                  _id: "$postalCode",
                  customercount: { $sum: 1 }
                  }
               },
               {
                  $sort: { customercount: -1 }
               }
            ]).toArray();
         }

Next Steps
----------

- :ref:`rm-convert-queries`
- :ref:`rm-convert-stored-procedures`

Learn More
----------

- :ref:`sql-to-mongodb-mapping`
- :manual:`SQL to Aggregation Mapping Chart </reference/sql-aggregation-comparison>`
