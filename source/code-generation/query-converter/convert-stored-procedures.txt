.. _rm-convert-stored-procedures:

=========================
Convert Stored Procedures
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can convert SQL stored procedures to MongoDB syntax with query 
converter. Query converter considers the mapping rules and schema 
transformations defined in your project when converting your SQL code.

About this Task
---------------

.. include:: /includes/fact-query-converter-generic.rst

Before you Begin
----------------

.. include:: /includes/fact-query-converter-disclaimer.rst

Steps
-----

.. procedure::
   :style: normal

   .. step:: Navigate to the query converter pane

      a. From the :guilabel:`Code Generation` tab, click the 
         :guilabel:`Query Converter` pane.

   .. step:: Open the query converter view

      a. If it is your first time using the query converter in your 
         project, click :guilabel:`Import From Database`.
         If your project already has converted SQL code, click the 
         :guilabel:`Manage Database Objects` button on the left-hand 
         pane.

   .. step:: Connect to your relational database

      a. Specify the connection details to your source database. For 
         details, see :ref:`rm-relational-database-connection-strings`.
      #. Click :guilabel:`Connect`.
   
   .. step:: Select stored procedures

      a. On the :guilabel:`Import Database Objects` modal, click 
         :guilabel:`Database`.
      #. Click the :icon-fa5:`chevron-right` icon next to your schema.
      #. Click the :icon-fa5:`chevron-right` icon next to 
         :guilabel:`Stored Procedures`.
      #. You can toggle stored procedures for conversion by clicking 
         the :icon-fa5:`check-square` icon next to a stored procedure's 
         name. All stored procedures are selected for conversion by 
         default.
      #. Click :guilabel:`Save`.

   .. step:: Convert and test syntax
   
      a. Click a stored procedure's name from the left-hand pane under 
         :guilabel:`Stored Procedures`.
         The SQL syntax is loaded into the :guilabel:`Imported Stored Procedure`
         text field.
      #. Select a :guilabel:`Target Language` from the drop-down.
         Query converter supports stored procedure conversions to 
         ``C#``, ``Java``, and ``JavaScript``.
      #. Click the :guilabel:`Convert` button. Wait for the AI to 
         convert your code. The converted MongoDB syntax displays
         in the :guilabel:`Converted MongoDB Query` text field. 
      #. Click the :icon-fa5:`copy` icon to copy the MongoDB syntax 
         to your clipboard.
      #. Test and validate the generated MongoDB syntax.

      .. tip:: 

         .. include:: /includes/fact-query-converter-filter.rst

Examples
--------

The examples show SQL stored procedure's converted to MongoDB syntax 
using query converter.

The following example shows a MySQL stored procedure 
converted to JavaScript:

.. tabs::

   .. tab:: Relational Input
      :tabid: Embedded-doc-in

      .. code-block:: sql
         :copyable: false

         BEGIN
            DECLARE v_rentals INT;
            DECLARE v_out     INT;
            SELECT COUNT(*) INTO v_rentals
            FROM rental
            WHERE inventory_id = p_inventory_id;
            IF v_rentals = 0 THEN
               RETURN TRUE;
            END IF;
            SELECT COUNT(rental_id) INTO v_out
            FROM inventory LEFT JOIN rental USING(inventory_id)
            WHERE inventory.inventory_id = p_inventory_id
            AND rental.return_date IS NULL;
            IF v_out > 0 THEN
               RETURN FALSE;
            ELSE
               RETURN TRUE;
            END IF;
         END

   .. tab:: MongoDB Output
      :tabid: Embedded-doc-out

      .. code-block:: javascript
         :copyable: false

         async function query(db, p_inventory_id) {
         const v_rentals = await db.collection('rental').countDocuments(
            { inventoryId: p_inventory_id }
         );
         if (v_rentals === 0) {
            return true;
         }
         const v_out = await db.collection('inventory').aggregate([
            {
               $lookup: {
               from: 'rental',
               localField: 'inventoryId',
               foreignField: 'inventoryId',
               as: 'rentalData'
               }
            },
            {
               $match: {
               inventoryId: p_inventory_id,
               'rentalData.returnDate': { $exists: false }
               }
            },
            {
               $count: 'rentalId'
            }
         ]).toArray();
         if (v_out.length > 0 && v_out[0].rentalId > 0) {
            return false;
         } else {
            return true;
         }
         }

The following example shows a MySQL stored procedure 
converted to C#:

.. tabs::

   .. tab:: Relational Input
      :tabid: Embedded-doc-in

      .. code-block:: sql
         :copyable: false

        BEGIN
            DECLARE v_customer_id INT;
            DECLARE EXIT HANDLER FOR NOT FOUND RETURN NULL;
            SELECT customer_id INTO v_customer_id
            FROM rental
            WHERE return_date IS NULL
            AND inventory_id = p_inventory_id;
            RETURN v_customer_id;
         END


   .. tab:: MongoDB Output
      :tabid: Embedded-doc-out

      .. code-block:: c#
         :copyable: false

        async Task<int?> Query(IMongoDatabase db)
        {
          var rentalCollection = db.GetCollection<BsonDocument>("rental");
          var filter = Builders<BsonDocument>.Filter.Eq("inventoryId", p_inventory_id) & Builders<BsonDocument>.Filter.Eq("returnDate", null);
          var result = await rentalCollection.Find(filter).FirstOrDefaultAsync();
          return result != null ? result["customerId"].AsInt32 : (int?)null;
        }


Next Steps
----------

- :ref:`rm-convert-queries`
- :ref:`rm-convert-views`

Learn More
----------

- `SQL Comparison Chart <https://www.mongodb.com/docs/manual/reference/sql-comparison/>`_
- `SQL to Aggregation Mapping Chart <https://www.mongodb.com/docs/manual/reference/sql-aggregation-comparison/>`_
