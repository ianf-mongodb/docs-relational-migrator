.. _rm-embedded-documents:

==================
Embedded Documents
==================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The :guilabel:`Embedded Documents` mapping rule is an advanced mapping 
rule option which must be explicitly added to a mapping model.

About this Task
---------------

The :guilabel:`Embedded Documents` mapping rule is available if the relational
table it is mapping from is on the one side of the foreign key relationship.

The table which contains the foreign key must also be mapped to a 
collection in the MongoDB model.

Behavior
--------

You would use the :guilabel:`Embedded Documents` mapping rule to denormalize
a foreign key relationship. With :guilabel:`Embedded Documents` you can
nest child foreign key fields in a parent collection.

You have two main options when denormalizing your relational data 
with the :guilabel:`Embedded Documents` option:

- You can embed the child documents into the parent and designate a 
  ``Prefix`` and ``Field name`` to embed fields as sub documents.

- You can merge into the parent, which represents the rows as 
  fields at the parent level.

Examples
--------

This section demonstration the relational Input and
the MongoDB output of the :guilabel:`Embedded Documents` mapping rule 
for a single row.

The blue dotted box in the MongoDB diagram pane is a visual preview of how each rule and option affect your destination data model. Using this feature, you can preview your destination data model before you run a sync job.

Embedded Documents
~~~~~~~~~~~~~~~~~~

In this example:

- A :guilabel:`Embedded Documents` mapping rule is applied to the ``Order`` table.
- The ``OrderLine`` table has two rows and the Order table has one row.
- The parent collection is set to  ``OrderLine``.
- :guilabel:`Merge fields into the parent` is not selected.
- The ``Field name`` is set to ``order``.

Input
`````

OrderLine Table:

.. list-table::
   :header-rows: 1

   * - OrderLineID
     - OrderID
     - ProductID
     - Quantity
   * - 1
     - 1
     - 1
     - 1
   * - 4
     - 1
     - 3
     - 1

Order Table:

.. list-table::
   :header-rows: 1

   * - OrderID
     - CustomerID
     - TotalAmount
     - OrderStatusID
   * - 1
     - 1
     - 550.00
     - 1

Output
``````

The documents in the ``OrderLine`` collection now has the ``Order`` details
embedded as an embedded document called ``Orders``.

.. code-block:: javascript

   {
     ObjectID: { 
      OrderLineID: 1 
     },
     OrderID: 1,
     ProductID: 1,
     Quantity: 1,
     Orders: {
       OrderID: 1,
       CustomerID: 1,
       TotalAmount: 550,
       OrderStatusID: 1,
     },
   },
   {
     ObjectID: { 
      OrderLineID: 4 
     },
     OrderID: 1,
     ProductID: 3,
     Quantity: 1,
     Orders: {
       OrderID: 1,
       CustomerID: 1,
       TotalAmount: 550,
       OrderStatusID: 1,
     },
   }

Merge fields into the parent
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In this example:

- The OrderLine table has (4) rows and the Order table has (3) rows.
- A :guilabel:`Embedded Documents` mapping rule is applied to the ``Order`` table.
- The parent collection is set to  ``orderLine``.
- :guilabel:`Merge fields into the parent` is selected.
- The :guilabel:`Prefix` is set to (root).

OrderLine Table:

.. list-table::
   :header-rows: 1

   * - OrderLineID
     - OrderID
     - ProductID
     - Quantity
   * - 1
     - 1
     - 1
     - 1
   * - 2
     - 2
     - 2
     - 1
   * - 3
     - 3
     - 3
     - 1
   * - 4
     - 1
     - 3
     - 1

Order Table:

.. list-table::
   :header-rows: 1

   * - OrderID
     - CustomerID
     - TotalAmount
     - OrderStatusID
   * - 1
     - 1
     - 550.00
     - 1
   * - 2
     - 2
     - 100.00
     - 2
   * - 3
     - 3
     - 500.00
     - 3

Output
``````

The documents in the ``OrderLine`` collection now has the ``Order`` details
merged into the parent document as fields.

.. code-block:: javascript

   {
     _id: {
       orderLineId: 1,
     },
     orderId: 1,
     productId: 1,
     quantity: 1,
     customerId: 1,
     orderStatusId: 1,
     totalAmount: 550,
   },
   {
     _id: {
       orderLineId: 2,
     },
     orderId: 2,
     productId: 2,
     quantity: 1,
     customerId: 2,
     orderStatusId: 2,
     totalAmount: 100,
   },
   {
     _id: {
       orderLineId: 3,
     },
     orderId: 3,
     productId: 3,
     quantity: 1,
     customerId: 3,
     orderStatusId: 3,
     totalAmount: 500,
   },
   {
     _id: {
       orderLineId: 4,
     },
     orderId: 1,
     productId: 3,
     quantity: 1,
     customerId: 1,
     orderStatusId: 1,
     totalAmount: 550,
   }
